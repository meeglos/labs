<?php

namespace Tests\Unit;

use App\Notifications\TaskWasUpdated;
use Illuminate\Support\Facades\Notification;
use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;

class TaskTest extends TestCase
{
    use DatabaseMigrations;

    protected $task;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->task = create('App\Task');
    }

    /** @test */
    function a_task_can_make_a_string_path()
    {
        $task = create('App\Task');

        $this->assertEquals(
            "/tasks/{$task->channel->slug}/{$task->id}", $task->path()
        );
    }

    /** @test */
    public function a_task_has_replies()
    {
        $this->assertInstanceOf('Illuminate\Database\Eloquent\Collection', $this->task->posts);
    }

    /** @test */
    function a_task_has_a_creator()
    {
        $this->assertInstanceOf('App\User', $this->task->creator);
    }

    /** @test */
    function a_task_can_add_a_comment()
    {
        $this->task->addComment([
           'comments'   => 'Foobar',
            'user_id'   => 1
        ]);

        $this->assertCount(1, $this->task->posts);
    }

    /** @test Created on 28/05/2017 */
    function a_task_notifies_all_registered_subscribers_when_a_post_is_added()
    {
        Notification::fake();

        $this->signIn()
            ->task
            ->subscribe()
            ->addComment([
                'comments'   => 'Foobar',
                'user_id'   => 999
            ]);

        Notification::assertSentTo(auth()->user(), TaskWasUpdated::class);
    }
    /** @test */
    function a_task_belongs_to_a_channel()
    {
        $task = create('App\Task');

        $this->assertInstanceOf('App\Channel', $task->channel);
    }

    /** @test Created on 26/05/2017 */
    function a_task_can_be_suscribed_to()
    {
        $task = create('App\Task');

        $this->signIn();

        $task->subscribe();

        $this->assertEquals(
            1,
            $task->subscriptions()->where('user_id', auth()->id())->count()
        );
    }

    /** @test Created on 26/05/2017 */
    function a_task_can_be_unsubscribed_from()
    {
        $task = create('App\Task');

        $task->subscribe($userId = 1);

        $task->unsubscribe($userId);

        $this->assertCount(0, $task->subscriptions);
    }

    /** @test Created on 27/05/2017 */
    function it_knows_if_the_authenticated_user_is_subscribed_to_it()
    {
        $task = create('App\Task');

        $this->signIn();

        $this->assertFalse($task->isSubscribedTo);

        $task->subscribe();

        $this->assertTrue($task->isSubscribedTo);
    }
}
